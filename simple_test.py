#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Egyszer≈± f√°jl teszt - NetCDF f√°jlok alapvet≈ë ellen≈ërz√©se
"""

import os

def check_file_headers():
    """Ellen≈ërzi a f√°jlok els≈ë b√°jtjait"""
    print("F√°jlfejl√©cek ellen≈ërz√©se...")
    
    files = [
        "data/temperature_1991_2020.nc",
        "data/precipitation_1991_2020.nc"
    ]
    
    for filepath in files:
        if os.path.exists(filepath):
            print(f"\n{filepath}:")
            print(f"M√©ret: {os.path.getsize(filepath)} b√°jt")
            
            # Els≈ë 50 b√°jt olvas√°sa
            try:
                with open(filepath, 'rb') as f:
                    header = f.read(50)
                    print(f"Els≈ë 20 b√°jt (hex): {header[:20].hex()}")
                    
                    # Keres√ºnk NetCDF jel√∂l√©seket
                    if b'CDF' in header[:10]:
                        print("‚úÖ NetCDF al√°√≠r√°s tal√°lhat√≥")
                    elif b'HDF' in header[:10]:
                        print("üìÑ HDF form√°tum (NetCDF4)")
                    else:
                        print("‚ùì Ismeretlen form√°tum")
                        print(f"Els≈ë 20 karakter: {header[:20]}")
                        
            except Exception as e:
                print(f"‚ùå Hiba a f√°jl olvas√°sakor: {e}")

def try_different_libraries():
    """K√ºl√∂nb√∂z≈ë k√∂nyvt√°rakkal pr√≥b√°lja meg megnyitni"""
    print("\nK√ºl√∂nb√∂z≈ë k√∂nyvt√°rak tesztel√©se...")
    
    filepath = "data/temperature_1991_2020.nc"
    
    # 1. Pr√≥ba: netCDF4 k√∂nyvt√°r k√∂zvetlen√ºl
    try:
        import netCDF4
        print("netCDF4 k√∂nyvt√°r pr√≥ba...")
        ds = netCDF4.Dataset(filepath, 'r')
        print(f"‚úÖ netCDF4: Dimenzi√≥k: {list(ds.dimensions.keys())}")
        print(f"‚úÖ netCDF4: V√°ltoz√≥k: {list(ds.variables.keys())}")
        ds.close()
        return True
    except Exception as e:
        print(f"‚ùå netCDF4 hiba: {e}")
    
    # 2. Pr√≥ba: xarray k√ºl√∂nb√∂z≈ë engine-ekkel
    try:
        import xarray as xr
        print("xarray netcdf4 engine pr√≥ba...")
        ds = xr.open_dataset(filepath, engine='netcdf4')
        print(f"‚úÖ xarray (netcdf4): {list(ds.data_vars.keys())}")
        ds.close()
        return True
    except Exception as e:
        print(f"‚ùå xarray netcdf4 hiba: {e}")
    
    try:
        print("xarray h5netcdf engine pr√≥ba...")
        ds = xr.open_dataset(filepath, engine='h5netcdf')
        print(f"‚úÖ xarray (h5netcdf): {list(ds.data_vars.keys())}")
        ds.close()
        return True
    except Exception as e:
        print(f"‚ùå xarray h5netcdf hiba: {e}")
    
    return False

def main():
    """F≈ë funkci√≥"""
    print("NetCDF F√°jl Diagnosztika")
    print("=" * 40)
    
    check_file_headers()
    
    success = try_different_libraries()
    
    if not success:
        print("\nü§î Lehets√©ges probl√©m√°k:")
        print("1. F√°jl s√©r√ºlt vagy nem szabv√°nyos NetCDF")
        print("2. Speci√°lis NetCDF4 form√°tum")
        print("3. Hi√°nyz√≥ f√ºgg≈ës√©gek")
        print("\nüí° Javasolt megold√°s:")
        print("pip install h5py h5netcdf")
    else:
        print("\n‚úÖ Siker√ºlt megnyitni a f√°jlt!")

if __name__ == "__main__":
    main()