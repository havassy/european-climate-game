#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
NetCDF f√°jlok r√©szletes diagnosztika
C√©l: Az ERA5 adatok pontos egys√©geinek √©s strukt√∫r√°j√°nak felt√°r√°sa
"""

import os
import netCDF4
import numpy as np

def analyze_netcdf_file(filepath, file_description):
    """R√©szletes NetCDF f√°jl elemz√©s"""
    
    print(f"\n{'='*60}")
    print(f"ELEMZ√âS: {file_description}")
    print(f"F√°jl: {filepath}")
    print(f"{'='*60}")
    
    if not os.path.exists(filepath):
        print(f"‚ùå F√°jl nem tal√°lhat√≥: {filepath}")
        return None
    
    try:
        # NetCDF f√°jl megnyit√°sa
        ds = netCDF4.Dataset(filepath, 'r')
        
        # Glob√°lis attrib√∫tumok
        print("\nüìã GLOB√ÅLIS ATTRIB√öTUMOK:")
        for attr in ds.ncattrs():
            value = getattr(ds, attr)
            print(f"  {attr}: {value}")
        
        # Dimenzi√≥k
        print("\nüìè DIMENZI√ìK:")
        for dim_name, dim in ds.dimensions.items():
            size = len(dim) if not dim.isunlimited() else "UNLIMITED"
            print(f"  {dim_name}: {size}")
        
        # Koordin√°ta v√°ltoz√≥k
        print("\nüó∫Ô∏è KOORDIN√ÅT√ÅK:")
        coord_vars = ['longitude', 'latitude', 'time', 'valid_time']
        for coord_name in coord_vars:
            if coord_name in ds.variables:
                var = ds.variables[coord_name]
                print(f"\n  {coord_name.upper()}:")
                print(f"    Alakja: {var.shape}")
                print(f"    T√≠pus: {var.dtype}")
                
                # Attrib√∫tumok
                for attr in var.ncattrs():
                    print(f"    {attr}: {getattr(var, attr)}")
                
                # Tartom√°ny
                if len(var) > 0:
                    print(f"    Tartom√°ny: {var[:].min():.6f} - {var[:].max():.6f}")
                    if coord_name == 'time' and len(var) > 1:
                        print(f"    Els≈ë √©rt√©k: {var[0]}")
                        print(f"    Utols√≥ √©rt√©k: {var[-1]}")
        
        # Adatv√°ltoz√≥k
        print("\nüå°Ô∏è ADATV√ÅLTOZ√ìK:")
        data_vars = [var for var in ds.variables.keys() 
                    if var not in ['longitude', 'latitude', 'time', 'valid_time', 'number', 'expver']]
        
        for var_name in data_vars:
            var = ds.variables[var_name]
            print(f"\n  {var_name.upper()}:")
            print(f"    Alakja: {var.shape}")
            print(f"    T√≠pus: {var.dtype}")
            print(f"    Dimenzi√≥k: {var.dimensions}")
            
            # Minden attrib√∫tum
            print("    Attrib√∫tumok:")
            for attr in var.ncattrs():
                value = getattr(var, attr)
                print(f"      {attr}: {value}")
            
            # Statisztik√°k minta adatokon
            try:
                # Els≈ë id≈ëpont, k√∂z√©ps≈ë koordin√°ta
                if len(var.shape) == 3:  # (time, lat, lon)
                    mid_lat = var.shape[1] // 2
                    mid_lon = var.shape[2] // 2
                    sample_data = var[:10, mid_lat, mid_lon]  # Els≈ë 10 id≈ëpont
                    
                    print(f"    Minta adatok (els≈ë 10 id≈ëpont, k√∂z√©ps≈ë koordin√°ta):")
                    print(f"      √ârt√©kek: {sample_data[:5]}...")
                    print(f"      Min: {sample_data.min():.8f}")
                    print(f"      Max: {sample_data.max():.8f}")
                    print(f"      √Åtlag: {sample_data.mean():.8f}")
                    print(f"      Std: {sample_data.std():.8f}")
            except Exception as e:
                print(f"    ‚ö†Ô∏è Nem siker√ºlt minta adatokat olvasni: {e}")
        
        ds.close()
        
        print(f"\n‚úÖ {file_description} elemz√©s befejezve")
        return True
        
    except Exception as e:
        print(f"‚ùå Hiba a f√°jl elemz√©se sor√°n: {e}")
        return False

def analyze_specific_location(temp_path, precip_path, lat=47.5, lon=19.0, location_name="Budapest"):
    """Konkr√©t helysz√≠n r√©szletes elemz√©se"""
    
    print(f"\n{'='*60}")
    print(f"HELYSZ√çN ELEMZ√âS: {location_name} ({lat}, {lon})")
    print(f"{'='*60}")
    
    try:
        # F√°jlok megnyit√°sa
        temp_ds = netCDF4.Dataset(temp_path, 'r')
        precip_ds = netCDF4.Dataset(precip_path, 'r')
        
        # Koordin√°t√°k
        lats = temp_ds.variables['latitude'][:]
        lons = temp_ds.variables['longitude'][:]
        
        # Legk√∂zelebbi r√°cs pont keres√©se
        lat_idx = np.argmin(np.abs(lats - lat))
        lon_idx = np.argmin(np.abs(lons - lon))
        
        actual_lat = lats[lat_idx]
        actual_lon = lons[lon_idx]
        
        print(f"C√©lkoordin√°t√°k: {lat}, {lon}")
        print(f"R√°cs koordin√°t√°k: {actual_lat:.2f}, {actual_lon:.2f}")
        print(f"T√°vols√°g: {abs(lat-actual_lat)*111:.1f}km N-S, {abs(lon-actual_lon)*111*np.cos(np.radians(lat)):.1f}km E-W")
        
        # Adatv√°ltoz√≥k keres√©se
        temp_vars = [var for var in temp_ds.variables.keys() 
                    if var not in ['longitude', 'latitude', 'time', 'valid_time', 'number', 'expver']]
        precip_vars = [var for var in precip_ds.variables.keys() 
                      if var not in ['longitude', 'latitude', 'time', 'valid_time', 'number', 'expver']]
        
        print(f"\nH≈ëm√©rs√©klet f√°jl v√°ltoz√≥i: {temp_vars}")
        print(f"Csapad√©k f√°jl v√°ltoz√≥i: {precip_vars}")
        
        # H≈ëm√©rs√©klet elemz√©se
        if temp_vars:
            temp_var_name = temp_vars[0]
            temp_var = temp_ds.variables[temp_var_name]
            temp_data = temp_var[:, lat_idx, lon_idx]
            
            print(f"\nH≈êM√âRS√âKLET ELEMZ√âS ({temp_var_name}):")
            print(f"  Id≈ësorok sz√°ma: {len(temp_data)}")
            print(f"  Els≈ë 12 √©rt√©k: {temp_data[:12]}")
            print(f"  Utols√≥ 12 √©rt√©k: {temp_data[-12:]}")
            print(f"  Minimum: {temp_data.min():.2f}")
            print(f"  Maximum: {temp_data.max():.2f}")
            print(f"  √Åtlag: {temp_data.mean():.2f}")
            
            # Egys√©gek ellen≈ërz√©se
            if hasattr(temp_var, 'units'):
                units = temp_var.units
                print(f"  Egys√©gek: {units}")
                if 'K' in units or temp_data.mean() > 100:
                    print("  ‚ö†Ô∏è Val√≥sz√≠n≈±leg Kelvin egys√©gben van")
                else:
                    print("  ‚úÖ Val√≥sz√≠n≈±leg Celsius egys√©gben van")
        
        # Csapad√©k elemz√©se  
        if precip_vars:
            precip_var_name = precip_vars[0]
            precip_var = precip_ds.variables[precip_var_name]
            precip_data = precip_var[:, lat_idx, lon_idx]
            
            print(f"\nCSAPAD√âK ELEMZ√âS ({precip_var_name}):")
            print(f"  Id≈ësorok sz√°ma: {len(precip_data)}")
            print(f"  Els≈ë 12 √©rt√©k: {precip_data[:12]}")
            print(f"  Utols√≥ 12 √©rt√©k: {precip_data[-12:]}")
            print(f"  Minimum: {precip_data.min():.8f}")
            print(f"  Maximum: {precip_data.max():.8f}")
            print(f"  √Åtlag: {precip_data.mean():.8f}")
            
            # Egys√©gek √©s lehets√©ges konverzi√≥k
            if hasattr(precip_var, 'units'):
                units = precip_var.units
                print(f"  Egys√©gek: {units}")
                
                # Tipikus ERA5 egys√©gek elemz√©se
                if 'm' in units.lower():
                    if 's' in units.lower():
                        print("  üí° m/s egys√©g - szorz√°s sz√ºks√©ges mm/h√≥-hoz")
                        monthly_mm = precip_data.mean() * 1000 * 30.44 * 24 * 3600 / (30.44 * 24 * 3600)
                        print(f"     Havi mm becsl√©s (√ó1000): {precip_data.mean() * 1000:.1f}")
                        print(f"     Havi mm becsl√©s (teljes konv.): {precip_data.mean() * 1000 * 30.44 * 24 * 3600:.1f}")
                    else:
                        print("  üí° M√©ter egys√©g - szorz√°s 1000-rel mm-hez")
                        print(f"     mm becsl√©s: {precip_data.mean() * 1000:.3f}")
                elif 'kg' in units.lower() and 'm-2' in units.lower() and 's-1' in units.lower():
                    print("  üí° kg/m¬≤/s egys√©g - egyen√©rt√©k≈± mm/s-val")
                    print(f"     Havi mm becsl√©s: {precip_data.mean() * 30.44 * 24 * 3600:.1f}")
            else:
                print("  ‚ö†Ô∏è Nincs egys√©g inform√°ci√≥")
        
        temp_ds.close()
        precip_ds.close()
        
        print(f"\n‚úÖ {location_name} helysz√≠n elemz√©s befejezve")
        
    except Exception as e:
        print(f"‚ùå Hiba a helysz√≠n elemz√©se sor√°n: {e}")

def main():
    """F≈ë diagnosztikai f√ºggv√©ny"""
    
    print("NetCDF F√ÅJLOK DIAGNOSZTIK√ÅJA")
    print("="*60)
    print("C√©l: ERA5 adatok pontos egys√©geinek √©s strukt√∫r√°j√°nak meg√©rt√©se")
    
    # F√°jl el√©r√©si utak
    temp_path = "data/temperature_1991_2020.nc"
    precip_path = "data/precipitation_1991_2020.nc"
    
    # H≈ëm√©rs√©klet f√°jl elemz√©se
    analyze_netcdf_file(temp_path, "H≈êM√âRS√âKLET F√ÅJL")
    
    # Csapad√©k f√°jl elemz√©se  
    analyze_netcdf_file(precip_path, "CSAPAD√âK F√ÅJL")
    
    # Konkr√©t helysz√≠n elemz√©se
    analyze_specific_location(temp_path, precip_path, 47.5, 19.0, "Budapest")
    
    print(f"\n{'='*60}")
    print("DIAGNOSZTIKA BEFEJEZVE")
    print("="*60)
    print("A fenti inform√°ci√≥k alapj√°n meghat√°rozhat√≥:")
    print("1. Az adatok pontos egys√©gei")
    print("2. A sz√ºks√©ges konverzi√≥k (ha vannak)")
    print("3. Az id≈ëbeli felbont√°s √©s tartom√°ny")
    print("4. A t√©rbeli koordin√°ta rendszer")
    

if __name__ == "__main__":
    main()