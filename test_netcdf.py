#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
NetCDF f√°jlok tesztel√©se - els≈ë l√©p√©s
C√©l: Megn√©zni, hogy mit tartalmaznak a climate adatf√°jlok
"""

import os

def check_files():
    """Ellen≈ërzi, hogy a NetCDF f√°jlok el√©rhet≈ëk-e"""
    print("üîç NetCDF f√°jlok ellen≈ërz√©se...")
    
    data_dir = "data"
    files_to_check = [
        "temperature_1991_2020.nc",
        "precipitation_1991_2020.nc"
    ]
    
    for filename in files_to_check:
        filepath = os.path.join(data_dir, filename)
        if os.path.exists(filepath):
            size_mb = os.path.getsize(filepath) / (1024 * 1024)
            print(f"‚úÖ {filename}: {size_mb:.1f} MB")
        else:
            print(f"‚ùå {filename}: Nem tal√°lhat√≥!")
    
    return True

def test_xarray_import():
    """Teszteli, hogy a sz√ºks√©ges k√∂nyvt√°rak el√©rhet≈ëk-e"""
    print("\nüìö Python k√∂nyvt√°rak ellen≈ërz√©se...")
    
    try:
        import xarray as xr
        print("‚úÖ xarray el√©rhet≈ë")
    except ImportError:
        print("‚ùå xarray hi√°nyzik! Telep√≠tsd: pip install xarray")
        return False
    
    try:
        import netCDF4
        print("‚úÖ netCDF4 el√©rhet≈ë") 
    except ImportError:
        print("‚ùå netCDF4 hi√°nyzik! Telep√≠tsd: pip install netCDF4")
        return False
    
    try:
        import pandas as pd
        print("‚úÖ pandas el√©rhet≈ë")
    except ImportError:
        print("‚ùå pandas hi√°nyzik! Telep√≠tsd: pip install pandas")
        return False
    
    return True

def peek_netcdf_structure():
    """Megn√©zi a NetCDF f√°jl alapvet≈ë strukt√∫r√°j√°t"""
    print("\nüî¨ NetCDF strukt√∫ra vizsg√°lata...")
    
    try:
        import xarray as xr
        
        # Temperature f√°jl vizsg√°lata
        temp_path = os.path.join("data", "temperature_1991_2020.nc")
        if os.path.exists(temp_path):
            print(f"\nüìä {temp_path} strukt√∫ra:")
            ds = xr.open_dataset(temp_path)
            
            print(f"Dimenzi√≥k: {list(ds.dims.keys())}")
            print(f"V√°ltoz√≥k: {list(ds.data_vars.keys())}")
            print(f"Koordin√°t√°k: {list(ds.coords.keys())}")
            
            # Koordin√°ta tartom√°nyok
            if 'longitude' in ds.coords:
                lon_range = f"{ds.longitude.min().values:.2f} - {ds.longitude.max().values:.2f}"
                print(f"Hossz√∫s√°g tartom√°ny: {lon_range}")
            
            if 'latitude' in ds.coords:
                lat_range = f"{ds.latitude.min().values:.2f} - {ds.latitude.max().values:.2f}"
                print(f"Sz√©less√©g tartom√°ny: {lat_range}")
            
            if 'time' in ds.coords:
                print(f"Id≈ëtartom√°ny: {ds.time.min().values} - {ds.time.max().values}")
            
            ds.close()
        
    except Exception as e:
        print(f"‚ùå Hiba a NetCDF vizsg√°lat k√∂zben: {e}")
        return False
    
    return True

def main():
    """F≈ë tesztf√ºggv√©ny"""
    print("üåç European Climate Game - NetCDF Teszt")
    print("=" * 50)
    
    # Alapvet≈ë ellen≈ërz√©sek
    if not check_files():
        return
    
    if not test_xarray_import():
        print("\nüí° Hi√°nyz√≥ k√∂nyvt√°rak telep√≠t√©se:")
        print("pip install xarray netcdf4 pandas")
        return
    
    # NetCDF strukt√∫ra vizsg√°lata
    if not peek_netcdf_structure():
        return
    
    print("\n‚úÖ Minden teszt sikeres!")
    print("\nüöÄ K√∂vetkez≈ë l√©p√©s: konkr√©t v√°rosok adatainak kinyer√©se")

if __name__ == "__main__":
    main()
